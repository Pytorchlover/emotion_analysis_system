# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'new_main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import QRegExp
import sys
from PyQt5.QtWidgets import QMainWindow, QApplication
import shutil
import second
import photo_rc
from PyQt5.QtCore import QUrl
from PyQt5 import QtWebEngineWidgets
from new_second import second_UI
from all_Thread import spider_Thread
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap,QRegExpValidator,QPalette,QBrush
from PyQt5.QtWidgets import QFileDialog, QMessageBox,QTableWidgetItem,QTableWidget,QMainWindow
from PyQt5.QtCore import QThread,pyqtSignal
from PyQt5.QtCore import Qt

get_data=False
being_data=0

class First_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1490, 857)
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 10, 101, 51))
        self.pushButton_3.setStyleSheet("QPushButton{\n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(0,191,255);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setGeometry(QtCore.QRect(10, 70, 101, 51))
        self.pushButton_4.setStyleSheet("QPushButton{\n"
"border:1px solid white;\n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(230,230,250);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(350, 10, 801, 151))
        self.label_3.setStyleSheet("image: url(:/111/photo/img1717558191173.png);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.pushButton_5 = QtWidgets.QPushButton(Form)
        self.pushButton_5.setGeometry(QtCore.QRect(1220, 100, 131, 31))
        self.pushButton_5.setStyleSheet("QPushButton{\n"
"\n"
"border:1px solid pink; \n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgba(135,206,250,220);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(Form)
        self.pushButton_6.setGeometry(QtCore.QRect(630, 100, 101, 31))
        self.pushButton_6.setStyleSheet("QPushButton{\n"
"border:1px solid pink; \n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgba(135,206,250,220);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(740, 100, 101, 31))
        self.pushButton.setStyleSheet("\n"
"QPushButton{\n"
"border:1px solid pink;\n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgba(135,206,250,220);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(850, 70, 261, 81))
        self.label_2.setStyleSheet("image: url(:/111/photo/img1717566791881.png);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(Form)
        self.lineEdit_2.setGeometry(QtCore.QRect(1110, 100, 102, 24))
        self.lineEdit_2.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.lineEdit_2.setReadOnly(True)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(519, 103, 101, 21))
        self.lineEdit.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(230, 90, 311, 41))
        self.label.setStyleSheet("\n"
"image: url(:/111/photo/img1717566765623.png);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.brower1 = QtWebEngineWidgets.QWebEngineView(Form)
        self.brower1.setGeometry(QtCore.QRect(0, 0, 0, 0))
        self.brower1.setObjectName("brower1")
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setGeometry(QtCore.QRect(120, 230, 1281, 591))
        self.tableWidget.setStyleSheet("background-color: rgba(255, 255, 255, 10);")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(220, 150, 271, 71))
        self.label_4.setStyleSheet("border-image: url(:/111/photo/20240611095344.png);")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.lineEdit_3 = QtWidgets.QLineEdit(Form)
        self.lineEdit_3.setGeometry(QtCore.QRect(480, 150, 501, 31))
        self.lineEdit_3.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.lineEdit_3.setReadOnly(True)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_7 = QtWidgets.QPushButton(Form)
        self.pushButton_7.setGeometry(QtCore.QRect(990, 150, 131, 31))
        self.pushButton_7.setStyleSheet("QPushButton{\n"
"\n"
"border:1px solid pink; \n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgba(135,206,250,220);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_7.setObjectName("pushButton_7")
        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setGeometry(QtCore.QRect(1140, 150, 231, 31))
        self.comboBox.setStyleSheet("QComboBox {\n"
"                border: 1px solid gray;\n"
"                border-radius: 5px;\n"
"                padding: 1px 18px 1px 3px;\n"
"                min-width: 6em;\n"
"                color: white;\n"
"            }\n"
"\n"
"            QComboBox:editable {\n"
"                background: white;\n"
"            }\n"
"\n"
"            QComboBox:!editable, QComboBox::drop-down:editable {\n"
"                background: rgba(135,206,250,220);\n"
"            }\n"
"\n"
"            QComboBox:!editable:on, QComboBox::drop-down:editable:on {\n"
"                background: lightblue;\n"
"            }\n"
"\n"
"            QComboBox:on {\n"
"                padding-top: 3px;\n"
"                padding-left: 4px;\n"
"            }\n"
"\n"
"            QComboBox::drop-down {\n"
"                subcontrol-origin: padding;\n"
"                subcontrol-position: top right;\n"
"                width: 15px;\n"
"                border-left-width: 1px;\n"
"                border-left-color: darkgray;\n"
"                border-left-style: solid;\n"
"                border-top-right-radius: 3px;\n"
"                border-bottom-right-radius: 3px;\n"
"            }\n"
"\n"
"            QComboBox::down-arrow {\n"
"                image: url(down_arrow.png);\n"
"            }")
        self.comboBox.setObjectName("comboBox")
        self.pushButton_8 = QtWidgets.QPushButton(Form)
        self.pushButton_8.setGeometry(QtCore.QRect(1370, 10, 101, 51))
        self.pushButton_8.setStyleSheet("QPushButton{\n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(0,191,255);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(Form)
        self.pushButton_9.setGeometry(QtCore.QRect(990, 190, 131, 31))
        self.pushButton_9.setStyleSheet("QPushButton{\n"
"\n"
"border:1px solid pink; \n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgba(135,206,250,220);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_9.setObjectName("pushButton_9")
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(1140, 200, 189, 21))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.radioButton = QtWidgets.QRadioButton(self.widget)
        self.radioButton.setStyleSheet("QRadioButton::indicator {\n"
"                width: 15px;\n"
"                height: 15px;\n"
"                border-radius: 9px;\n"
"                border: 2px solid rgb(135,206,250);\n"
"                background-color: white;\n"
"            }\n"
"            QRadioButton::indicator:checked {\n"
"                background-color:  rgb(230,230,250);\n"
"                border: 2px solid #1E90FF;\n"
"            }\n"
"            QRadioButton {\n"
"                font-size: 16px;\n"
"                color:  rgb(135,206,250);\n"
"            }")
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.horizontalLayout.addWidget(self.radioButton)
        self.radioButton_2 = QtWidgets.QRadioButton(self.widget)
        self.radioButton_2.setStyleSheet("QRadioButton::indicator {\n"
                                       "                width: 15px;\n"
                                       "                height: 15px;\n"
                                       "                border-radius: 9px;\n"
                                       "                border: 2px solid rgb(135,206,250);\n"
                                       "                background-color: white;\n"
                                       "            }\n"
                                       "            QRadioButton::indicator:checked {\n"
                                       "                background-color:  rgb(230,230,250);\n"
                                       "                border: 2px solid #1E90FF;\n"
                                       "            }\n"
                                       "            QRadioButton {\n"
                                       "                font-size: 16px;\n"
                                       "                color:  rgb(135,206,250);\n"
                                       "            }")
        self.radioButton_2.setObjectName("radioButton_2")
        self.horizontalLayout.addWidget(self.radioButton_2)
        # self.brower1.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.label_3.raise_()
        self.pushButton_5.raise_()
        self.pushButton_6.raise_()
        self.pushButton.raise_()
        self.label_2.raise_()
        self.lineEdit_2.raise_()
        self.lineEdit.raise_()
        self.label.raise_()
        self.label_4.raise_()
        self.lineEdit_3.raise_()
        self.pushButton_7.raise_()
        self.comboBox.raise_()
        self.pushButton_8.raise_()
        self.pushButton_9.raise_()
        self.radioButton.raise_()
        self.radioButton_2.raise_()

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.F2 = second_UI()
        # palette = QPalette()
        # palette.setBrush(QPalette.Background, QBrush(QPixmap("photo/zjoun-xin4x.jpg")))
        # self.F2.setPalette(palette)
        palette = QPalette()
        palette.setBrush(QPalette.Background, QBrush(QPixmap("photo/zjoun-xin4x.jpg")))
        self.setPalette(palette)

        self.pushButton.clicked.connect(self.get_data)
        self.pushButton_5.clicked.connect(self.preserve_data)
        self.pushButton_6.clicked.connect(self.endprocess)
        self.pushButton_4.clicked.connect(self.Form2)
        self.F2.pushButton_3.clicked.connect(self.Form1)
        self.pushButton_7.clicked.connect(self.view_charts)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton_3.setText(_translate("Form", "爬取微博内容"))
        self.pushButton_4.setText(_translate("Form", "舆情分析系统"))
        self.pushButton_5.setText(_translate("Form", "保存内容至本地"))
        self.pushButton_6.setText(_translate("Form", "停止获取"))
        self.pushButton.setText(_translate("Form", "开始获取"))
        self.pushButton_7.setText(_translate("Form", "打开文件夹"))
        self.pushButton_8.setText(_translate("Form", "关闭"))
        self.pushButton_9.setText(_translate("Form", "保存可视化"))
        self.radioButton.setText(_translate("Form", "HTML形式"))
        self.radioButton_2.setText(_translate("Form", "图片形式"))
    def get_data(self):
        global being_data
        if self.lineEdit.text() is None or self.lineEdit.text() == '':
                QMessageBox.information(self, "Error!", "请先输入获取的微博内容数目！", QMessageBox.Ok)
                return
        self.pushButton.setEnabled(False)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setStyleSheet("background-color: rgba(255, 255, 255, 10);")
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setStyleSheet("alternate-background-color: #f0f0f0;")
        self.thread_3 = spider_Thread(self.lineEdit.text())
        self.thread_3.spi_data.connect(self.additem)
        self.tableWidget.setRowCount(int(self.lineEdit.text())+25)
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setHorizontalHeaderLabels(['用户', 'IP', '话题', '内容', '点赞', '评论', '转发'])
        being_data=1
        self.thread_3.start()

    def additem(self,list1):
        global get_data
        global being_data
        twicefive_data,current=list1
        self.lineEdit_2.setText(str(current))
        for i in range(len(twicefive_data)):
             self.tableWidget.setItem(current-25+i, 0, QTableWidgetItem(str(twicefive_data[i][0])))  # 设置该行元素
             self.tableWidget.setItem(current-25+i, 1, QTableWidgetItem(str(twicefive_data[i][1])))
             self.tableWidget.setItem(current-25+i, 2, QTableWidgetItem(str(twicefive_data[i][2])))
             self.tableWidget.setItem(current-25+i, 3, QTableWidgetItem(str(twicefive_data[i][3])))
             self.tableWidget.setItem(current-25+i, 4, QTableWidgetItem(str(twicefive_data[i][4])))
             self.tableWidget.setItem(current-25+i, 5, QTableWidgetItem(str(twicefive_data[i][5])))
             self.tableWidget.setItem(current-25+i, 6, QTableWidgetItem(str(twicefive_data[i][6])))
        if current == int(self.lineEdit.text())+25:
            get_data=True
            self.pushButton.setEnabled(True)
            being_data=2
            QMessageBox.information(self, "Error!", "已获取完成！", QMessageBox.Ok)

    def preserve_data(self):
        global get_data
        if get_data==False:
            QMessageBox.information(self, "Error!", "请先进行爬取！", QMessageBox.Ok)
            return
        filename, _ = QFileDialog.getSaveFileName(self, "Save file", "", "*.csv;;All Files(*)")
        shutil.copy(r'data/data.csv', filename)
    def endprocess(self):
        global being_data
        if being_data==0:
            QMessageBox.information(self, "Error!", "未进行获取！", QMessageBox.Ok)
            return
        if being_data==2:
            QMessageBox.information(self, "Error!", "已获取结束！", QMessageBox.Ok)
            return
        self.thread_3.terminate()
        self.thread_3.wait()
        QMessageBox.information(self, "Error!", "已终止进程！", QMessageBox.Ok)
    def Form2(self):
        self.F2.show()
        self.close()
    def Form1(self):
        self.F2.close()
        self.show()
    def view_charts(self):
        self.brower1.setGeometry(QtCore.QRect(120, 230, 1281, 591))
        self.brower1.load(QUrl('file:///stack_bar_percent.html'))



