# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import shutil
import sys
from viwe import line1, line2, tu
from PyQt5.QtCore import QUrl, QPoint
from PyQt5 import QtWebEngineWidgets
from second import second_UI
from all_Thread import spider_Thread
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QRegExpValidator, QPalette, QBrush, QMouseEvent
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QTableWidgetItem, QTableWidget, QMainWindow
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtCore import Qt

get_data = False
being_data = 0
filepath = None
view = False


class First_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1490, 857)
        Form.setStyleSheet("#Form{\n"
                           "    ;\n"
                           "    ;\n"
                           "    border-image: url(:/111/photo/20220816203419_5b1c3.jpg);\n"
                           "}")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 10, 111, 51))
        self.pushButton_3.setStyleSheet("QPushButton{\n"
                                        "border-radius:15px;    /*设置圆角半径 */\n"
                                        "padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
                                        "background-color: rgba(0,191,255,200);    /*背景颜色*/\n"
                                        "color:white;        /*字体颜色*/\n"
                                        "min-width:20px;    /*设置最小宽度*/\n"
                                        "min-height:20px;    /*设置最小高度*/\n"
                                        "font:bold 14px;        /*设置按钮文字和大小*/\n"
                                        "}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setGeometry(QtCore.QRect(10, 70, 111, 51))
        self.pushButton_4.setStyleSheet("QPushButton{\n"
                                        "border:1px solid white;\n"
                                        "border-radius:15px;    /*设置圆角半径 */\n"
                                        "padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
                                        "background-color: rgba(230,230,250,200);    /*背景颜色*/\n"
                                        "color:white;        /*字体颜色*/\n"
                                        "min-width:20px;    /*设置最小宽度*/\n"
                                        "min-height:20px;    /*设置最小高度*/\n"
                                        "font:bold 14px;        /*设置按钮文字和大小*/\n"
                                        "}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(340, 10, 791, 151))
        self.label_3.setStyleSheet("image: url(:/111/photo/img1717558191173.png);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.pushButton_5 = QtWidgets.QPushButton(Form)
        self.pushButton_5.setGeometry(QtCore.QRect(1220, 100, 131, 31))
        self.pushButton_5.setStyleSheet("QPushButton{\n"
                                        "\n"
                                        "border:1px solid pink; \n"
                                        "border-radius:15px;    /*设置圆角半径 */\n"
                                        "padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
                                        "background-color: rgba(135,206,250,220);    /*背景颜色*/\n"
                                        "color:white;        /*字体颜色*/\n"
                                        "min-width:20px;    /*设置最小宽度*/\n"
                                        "min-height:20px;    /*设置最小高度*/\n"
                                        "font:bold 14px;        /*设置按钮文字和大小*/\n"
                                        "}")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(Form)
        self.pushButton_6.setGeometry(QtCore.QRect(1120, 100, 101, 31))
        self.pushButton_6.setStyleSheet("QPushButton{\n"
                                        "border:1px solid pink; \n"
                                        "border-radius:15px;    /*设置圆角半径 */\n"
                                        "padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
                                        "background-color: rgba(135,206,250,220);    /*背景颜色*/\n"
                                        "color:white;        /*字体颜色*/\n"
                                        "min-width:20px;    /*设置最小宽度*/\n"
                                        "min-height:20px;    /*设置最小高度*/\n"
                                        "font:bold 14px;        /*设置按钮文字和大小*/\n"
                                        "}")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(1020, 100, 101, 31))
        self.pushButton.setStyleSheet("\n"
                                      "QPushButton{\n"
                                      "border:1px solid pink;\n"
                                      "border-radius:15px;    /*设置圆角半径 */\n"
                                      "padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
                                      "background-color: rgba(135,206,250,220);    /*背景颜色*/\n"
                                      "color:white;        /*字体颜色*/\n"
                                      "min-width:20px;    /*设置最小宽度*/\n"
                                      "min-height:20px;    /*设置最小高度*/\n"
                                      "font:bold 14px;        /*设置按钮文字和大小*/\n"
                                      "}")
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(630, 70, 301, 81))
        self.label_2.setStyleSheet("image: url(./photo/img1.png);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(Form)
        self.lineEdit_2.setGeometry(QtCore.QRect(910, 100, 102, 24))
        self.lineEdit_2.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(519, 103, 101, 21))
        self.lineEdit.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(230, 90, 311, 41))
        self.label.setStyleSheet("\n"
                                 "image: url(./photo/img1717566765623.png);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.brower1 = QtWebEngineWidgets.QWebEngineView(Form)
        self.brower1.setGeometry(QtCore.QRect(0, 0, 0, 0))
        self.brower1.setObjectName("brower1")
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setGeometry(QtCore.QRect(90, 230, 1351, 591))
        self.tableWidget.setStyleSheet("background-color: rgba(255, 255, 255, 10);")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(220, 150, 271, 71))
        self.label_4.setStyleSheet("border-image: url(:/111/photo/20240611095344.png);")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.lineEdit_3 = QtWidgets.QLineEdit(Form)
        self.lineEdit_3.setGeometry(QtCore.QRect(480, 150, 501, 31))
        self.lineEdit_3.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.lineEdit_3.setReadOnly(True)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_7 = QtWidgets.QPushButton(Form)
        self.pushButton_7.setGeometry(QtCore.QRect(990, 150, 131, 31))
        self.pushButton_7.setStyleSheet("QPushButton{\n"
                                        "\n"
                                        "border:1px solid pink; \n"
                                        "border-radius:15px;    /*设置圆角半径 */\n"
                                        "padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
                                        "background-color: rgba(135,206,250,220);    /*背景颜色*/\n"
                                        "color:white;        /*字体颜色*/\n"
                                        "min-width:20px;    /*设置最小宽度*/\n"
                                        "min-height:20px;    /*设置最小高度*/\n"
                                        "font:bold 14px;        /*设置按钮文字和大小*/\n"
                                        "}")
        self.pushButton_7.setObjectName("pushButton_7")
        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setGeometry(QtCore.QRect(1140, 150, 231, 31))
        self.comboBox.setStyleSheet("QComboBox {\n"
                                    "                border: 1px solid gray;\n"
                                    "                border-radius: 5px;\n"
                                    "                padding: 1px 18px 1px 3px;\n"
                                    "                min-width: 6em;\n"
                                    "                color: white;\n"
                                    "            }\n"
                                    "\n"
                                    "            QComboBox:editable {\n"
                                    "                background: white;\n"
                                    "            }\n"
                                    "\n"
                                    "            QComboBox:!editable, QComboBox::drop-down:editable {\n"
                                    "                background: rgba(135,206,250,220);\n"
                                    "            }\n"
                                    "\n"
                                    "            QComboBox:!editable:on, QComboBox::drop-down:editable:on {\n"
                                    "                background: lightblue;\n"
                                    "            }\n"
                                    "\n"
                                    "            QComboBox:on {\n"
                                    "                padding-top: 3px;\n"
                                    "                padding-left: 4px;\n"
                                    "            }\n"
                                    "\n"
                                    "            QComboBox::drop-down {\n"
                                    "                subcontrol-origin: padding;\n"
                                    "                subcontrol-position: top right;\n"
                                    "                width: 15px;\n"
                                    "                border-left-width: 1px;\n"
                                    "                border-left-color: darkgray;\n"
                                    "                border-left-style: solid;\n"
                                    "                border-top-right-radius: 3px;\n"
                                    "                border-bottom-right-radius: 3px;\n"
                                    "            }\n"
                                    "\n"
                                    "            QComboBox::down-arrow {\n"
                                    "                image: url(down_arrow.png);\n"
                                    "            }")
        self.comboBox.setObjectName("comboBox")
        self.pushButton_8 = QtWidgets.QPushButton(Form)
        self.pushButton_8.setGeometry(QtCore.QRect(1370, 10, 101, 51))
        self.pushButton_8.setStyleSheet("QPushButton{\n"
                                        "border-radius:15px;    /*设置圆角半径 */\n"
                                        "padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
                                        "background-color: rgba(0,191,255,200);    /*背景颜色*/\n"
                                        "color:white;        /*字体颜色*/\n"
                                        "min-width:20px;    /*设置最小宽度*/\n"
                                        "min-height:20px;    /*设置最小高度*/\n"
                                        "font:bold 14px;        /*设置按钮文字和大小*/\n"
                                        "}")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(Form)
        self.pushButton_9.setGeometry(QtCore.QRect(990, 190, 131, 31))
        self.pushButton_9.setStyleSheet("QPushButton{\n"
                                        "\n"
                                        "border:1px solid pink; \n"
                                        "border-radius:15px;    /*设置圆角半径 */\n"
                                        "padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
                                        "background-color: rgba(135,206,250,220);    /*背景颜色*/\n"
                                        "color:white;        /*字体颜色*/\n"
                                        "min-width:20px;    /*设置最小宽度*/\n"
                                        "min-height:20px;    /*设置最小高度*/\n"
                                        "font:bold 14px;        /*设置按钮文字和大小*/\n"
                                        "}")
        self.pushButton_9.setObjectName("pushButton_9")
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(1140, 200, 189, 21))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.radioButton = QtWidgets.QRadioButton(self.widget)
        self.radioButton.setStyleSheet("QRadioButton::indicator {\n"
                                       "                width: 15px;\n"
                                       "                height: 15px;\n"
                                       "                border-radius: 9px;\n"
                                       "                border: 2px solid rgb(135,206,250);\n"
                                       "                background-color: white;\n"
                                       "            }\n"
                                       "            QRadioButton::indicator:checked {\n"
                                       "                background-color:  rgb(230,230,250);\n"
                                       "                border: 2px solid #1E90FF;\n"
                                       "            }\n"
                                       "            QRadioButton {\n"
                                       "                font-size: 16px;\n"
                                       "                color:  rgb(135,206,250);\n"
                                       "            }")
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.horizontalLayout.addWidget(self.radioButton)

        self.brower1.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.label_3.raise_()
        self.pushButton_5.raise_()
        self.pushButton_6.raise_()
        self.pushButton.raise_()
        self.label_2.raise_()
        self.lineEdit_2.raise_()
        self.lineEdit.raise_()
        self.label.raise_()
        self.label_4.raise_()
        self.lineEdit_3.raise_()
        self.pushButton_7.raise_()
        self.comboBox.raise_()
        self.pushButton_8.raise_()
        self.pushButton_9.raise_()
        self.radioButton.raise_()
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.F2 = second_UI()
        palette = QPalette()
        palette.setBrush(QPalette.Background, QBrush(QPixmap("photo/20220828131919_adb62.jpg")))
        self.F2.setPalette(palette)
        self.F2.setWindowFlags(Qt.FramelessWindowHint)

        self.pushButton.clicked.connect(self.get_data)
        self.pushButton_5.clicked.connect(self.preserve_data)
        self.pushButton_6.clicked.connect(self.endprocess)
        self.pushButton_4.clicked.connect(self.Form2)
        self.F2.pushButton_3.clicked.connect(self.Form1)
        self.pushButton_7.clicked.connect(self.openFile)
        self.pushButton_8.clicked.connect(self.shutdown)
        self.comboBox.activated.connect(self.view_charts)
        self.pushButton_9.clicked.connect(self.preserve_fig)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton_3.setText(_translate("Form", "爬取微博内容"))
        self.pushButton_4.setText(_translate("Form", "舆情分析系统"))
        self.pushButton_5.setText(_translate("Form", "保存内容至本地"))
        self.pushButton_6.setText(_translate("Form", "停止获取"))
        self.pushButton.setText(_translate("Form", "开始获取"))
        self.pushButton_7.setText(_translate("Form", "打开文件夹"))
        self.pushButton_8.setText(_translate("Form", "关闭"))
        self.pushButton_9.setText(_translate("Form", "保存可视化"))
        self.radioButton.setText(_translate("Form", "HTML形式"))

    def get_data(self):
        global being_data
        if self.lineEdit.text() is None or self.lineEdit.text() == '':
            QMessageBox.information(self, "Error!", "请先输入获取的微博内容！", QMessageBox.Ok)
            return
        elif self.lineEdit_2.text() is None or self.lineEdit_2.text() == '':
            QMessageBox.information(self, "Error!", "请先输入获取的微博内容数目！", QMessageBox.Ok)
            return
        self.brower1.setGeometry(QtCore.QRect(0, 0, 0, 0))
        self.pushButton.setEnabled(False)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setStyleSheet("background-color: rgba(255, 255, 255, 10);")
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setStyleSheet("alternate-background-color: #f0f0f0;")
        self.thread_3 = spider_Thread(self.lineEdit.text(), self.lineEdit_2.text())
        self.thread_3.spi_data.connect(self.additem)
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setHorizontalHeaderLabels(['用户', 'IP', '话题', '内容', '点赞', '评论', '转发'])
        being_data = 1
        self.thread_3.start()

    def additem(self, list1):
        global get_data
        global being_data
        twicefive_data, current = list1
        print('current', current)
        print(len(twicefive_data))
        self.lineEdit_2.setText(str(current))
        # 设置表格的列数，这里根据 twicefive_data 中每个子列表的元素个数确定
        column_count = len(twicefive_data[0]) if twicefive_data else 0
        self.tableWidget.setColumnCount(column_count)

        # 设置表格的行数，即数据的数量
        row_count = len(twicefive_data)
        self.tableWidget.setRowCount(row_count)

        # 填充数据到表格
        for i in range(row_count):
            for j in range(column_count):
                self.tableWidget.setItem(i, j, QTableWidgetItem(str(twicefive_data[i][j])))
        if current == int(self.lineEdit_2.text()):
            get_data=True
            self.pushButton.setEnabled(True)
            being_data=2
            QMessageBox.information(self, "Error!", "已获取完成！", QMessageBox.Ok)

    def openFile(self):  # 选择本地图片上传
        global filepath  # 这里为了方便别的地方引用图片路径，我们把它设置为全局变量
        global view
        view = False
        filepath, imgType = QFileDialog.getOpenFileName(self, "打开数据文件", "",
                                                        "*.csv;;All Files(*)")  # 弹出一个文件选择框，第一个返回值imgName记录选中的文件路径+文件名，第二个返回值imgType记录文件的类型
        self.lineEdit_3.setText(filepath)  # 显示所选图片的本地路径
        self.comboBox.addItems(['各省份人口数量', '活跃的用户', '词云'])

    def preserve_data(self):
        global get_data
        if get_data == False:
            QMessageBox.information(self, "Error!", "请先进行爬取！", QMessageBox.Ok)
            return
        filename, _ = QFileDialog.getSaveFileName(self, "Save file", "", "*.csv;;All Files(*)")
        shutil.copy(r'data/data.csv', filename)

    import shutil
    from PyQt5.QtWidgets import QFileDialog, QMessageBox

    def preserve_fig(self):
        global view
        if view == False:
            QMessageBox.information(self, "Error!", "请打开文件！", QMessageBox.Ok)
            return
        if self.radioButton.isChecked():
            filename, _ = QFileDialog.getSaveFileName(self, "Save file", "", "*.html;;All Files(*)")
            if filename == '':
                QMessageBox.information(self, "Error!", "不能输入为空！", QMessageBox.Ok)
                return
            # 复制 HTML 文件
            shutil.copy(r'output.html', filename)

    def endprocess(self):
        global being_data
        if being_data == 0:
            QMessageBox.information(self, "Error!", "未进行获取！", QMessageBox.Ok)
            return
        if being_data == 2:
            QMessageBox.information(self, "Error!", "已获取结束！", QMessageBox.Ok)
            return
        self.thread_3.terminate()
        # wait函数是个阻塞的接口，意思是线程必须真的退出了，才会执行wait之后的语句，否则将会一直阻塞在这里，如果在界面上使用，需要保证线程中代码的合理性。
        self.thread_3.wait()
        QMessageBox.information(self, "Error!", "已终止进程！", QMessageBox.Ok)

    def Form2(self):
        self.F2.show()
        self.close()

    def Form1(self):
        self.F2.close()
        self.show()

    def view_charts(self):
        global view
        global filepath
        view = True
        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(0)
        if self.comboBox.currentIndex() == 0:
            line1(filepath)
            self.brower1.setGeometry(QtCore.QRect(190, 230, 1100, 591))
            self.brower1.load(QUrl('file:///output.html'))
        if self.comboBox.currentIndex() == 1:
            line2(filepath)
            self.brower1.setGeometry(QtCore.QRect(190, 230, 1000, 591))
            self.brower1.load(QUrl('file:///output.html'))
        if self.comboBox.currentIndex() == 2:
            tu(filepath)
            self.brower1.setGeometry(QtCore.QRect(190, 230, 1000, 591))
            self.brower1.load(QUrl('file:///output.html'))

    def mouseMoveEvent(self, e: QMouseEvent):  # 重写移动事件
        if self._tracking:
            self._endPos = e.pos() - self._startPos
            self.move(self.pos() + self._endPos)

    def mousePressEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._startPos = QPoint(e.x(), e.y())
            self._tracking = True

    def mouseReleaseEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._tracking = False
            self._startPos = None
            self._endPos = None

    def shutdown(self):
        self.destroy()  # 窗口关闭销毁
        sys.exit(0)
