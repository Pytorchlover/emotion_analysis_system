# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'new_second.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QFileDialog, QMessageBox,QTableWidgetItem,QTableWidget,QWidget
from PyQt5.QtCore import QThread,pyqtSignal
from PyQt5.QtCore import Qt
# import main
import matplotlib.pyplot as plt
import photo_rc
import csv
# from test import eval_one,Model
from test import *
import torch
from all_Thread import cluster_Thread,analyze_Thread
import pandas as pd

filepath=None
cluter=False
image=False
plt.rcParams['font.sans-serif'] = ['SimHei']

class Second_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1490, 857)
        Form.setStyleSheet("")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(380, 0, 621, 101))
        self.label.setStyleSheet("image: url(:/111/photo/image.png);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(267, 107, 441, 24))
        self.lineEdit.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(119, 79, 151, 81))
        self.label_3.setStyleSheet("image: url(:/111/photo/img1717565523966.png);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(40, 220, 961, 511))
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 10, 121, 41))
        self.pushButton_3.setStyleSheet("QPushButton{\n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(0,191,255);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setGeometry(QtCore.QRect(10, 60, 121, 41))
        self.pushButton_4.setStyleSheet("QPushButton{\n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(230,230,250);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(719, 99, 91, 41))
        self.pushButton.setStyleSheet("QPushButton{\n"
"border:1px solid white; \n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(230,230,250);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(260, 100, 16, 16))
        self.label_2.setStyleSheet("image: url(:/111/photo/img1717565523966.png);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(870, 150, 111, 41))
        self.pushButton_2.setStyleSheet("QPushButton{\n"
"border:1px solid white; \n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(230,230,250);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_5 = QtWidgets.QPushButton(Form)
        self.pushButton_5.setGeometry(QtCore.QRect(140, 160, 91, 41))
        self.pushButton_5.setStyleSheet("QPushButton{\n"
"border:1px solid white; \n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(230,230,250);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(Form)
        self.pushButton_6.setGeometry(QtCore.QRect(600, 160, 111, 31))
        self.pushButton_6.setStyleSheet("QPushButton{\n"
"border:1px solid white; \n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(230,230,250);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_6.setObjectName("pushButton_6")
        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setGeometry(QtCore.QRect(360, 160, 231, 31))
        self.comboBox.setStyleSheet("QComboBox {\n"
"                border: 1px solid gray;\n"
"                border-radius: 5px;\n"
"                padding: 1px 18px 1px 3px;\n"
"                min-width: 6em;\n"
"                color: white;\n"
"            }\n"
"\n"
"            QComboBox:editable {\n"
"                background: white;\n"
"            }\n"
"\n"
"            QComboBox:!editable, QComboBox::drop-down:editable {\n"
"                background: rgb(230,230,250);\n"
"            }\n"
"\n"
"            QComboBox:!editable:on, QComboBox::drop-down:editable:on {\n"
"                background: lightblue;\n"
"            }\n"
"\n"
"            QComboBox:on {\n"
"                padding-top: 3px;\n"
"                padding-left: 4px;\n"
"            }\n"
"\n"
"            QComboBox::drop-down {\n"
"                subcontrol-origin: padding;\n"
"                subcontrol-position: top right;\n"
"                width: 15px;\n"
"                border-left-width: 1px;\n"
"                border-left-color: darkgray;\n"
"                border-left-style: solid;\n"
"                border-top-right-radius: 3px;\n"
"                border-bottom-right-radius: 3px;\n"
"            }\n"
"\n"
"            QComboBox::down-arrow {\n"
"                image: url(down_arrow.png);\n"
"            }")
        self.comboBox.setObjectName("comboBox")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(260, 160, 101, 31))
        self.label_5.setStyleSheet("image: url(:/111/photo/img1717572147820.png);")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.pushButton_7 = QtWidgets.QPushButton(Form)
        self.pushButton_7.setGeometry(QtCore.QRect(720, 160, 111, 31))
        self.pushButton_7.setStyleSheet("QPushButton{\n"
"border:1px solid white; \n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(230,230,250);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_7.setObjectName("pushButton_7")
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setGeometry(QtCore.QRect(70, 210, 1301, 611))
        self.tableWidget.setStyleSheet("background-color: rgba(255, 255, 255, 10);")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.pushButton_8 = QtWidgets.QPushButton(Form)
        self.pushButton_8.setGeometry(QtCore.QRect(1380, 10, 101, 51))
        self.pushButton_8.setStyleSheet("QPushButton{\n"
"border-radius:15px;    /*设置圆角半径 */\n"
"padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
"background-color: rgb(230,230,250);    /*背景颜色*/\n"
"color:white;        /*字体颜色*/\n"
"min-width:20px;    /*设置最小宽度*/\n"
"min-height:20px;    /*设置最小高度*/\n"
"font:bold 14px;        /*设置按钮文字和大小*/\n"
"}")
        self.pushButton_8.setObjectName("pushButton_8")
        self.layoutWidget = QtWidgets.QWidget(Form)
        self.layoutWidget.setGeometry(QtCore.QRect(1000, 160, 189, 21))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.radioButton = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton.setStyleSheet("QRadioButton::indicator {\n"
"                width: 15px;\n"
"                height: 15px;\n"
"                border-radius: 9px;\n"
"                border: 2px solid rgb(230,230,250);\n"
"                background-color: white;\n"
"            }\n"
"            QRadioButton::indicator:checked {\n"
"                background-color:  rgb(0,191,255);\n"
"                border: 2px solid #1E90FF;\n"
"            }\n"
"            QRadioButton {\n"
"                font-size: 16px;\n"
"                color:  rgb(230,230,250);\n"
"            }")
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.horizontalLayout.addWidget(self.radioButton)
        self.radioButton_2 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_2.setStyleSheet("QRadioButton::indicator {\n"
"                width: 15px;\n"
"                height: 15px;\n"
"                border-radius: 9px;\n"
"                border: 2px solid rgb(230,230,250);\n"
"                background-color: white;\n"
"            }\n"
"            QRadioButton::indicator:checked {\n"
"                background-color:  rgb(0,191,255);\n"
"                border: 2px solid #1E90FF;\n"
"            }\n"
"            QRadioButton {\n"
"                font-size: 16px;\n"
"                color:  rgb(230,230,250);\n"
"            }")
        self.radioButton_2.setObjectName("radioButton_2")
        self.horizontalLayout.addWidget(self.radioButton_2)
        self.label_4.raise_()
        self.tableWidget.raise_()
        self.label.raise_()
        self.lineEdit.raise_()
        self.label_3.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.pushButton.raise_()
        self.label_2.raise_()
        self.pushButton_2.raise_()
        self.pushButton_5.raise_()
        self.pushButton_6.raise_()
        self.comboBox.raise_()
        self.label_5.raise_()
        self.pushButton_7.raise_()
        self.pushButton_8.raise_()
        self.layoutWidget.raise_()

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.pushButton.clicked.connect(self.openImage)
        self.pushButton_5.clicked.connect(self.cluster)
        self.pushButton_6.clicked.connect(self.analyze)
        self.pushButton_2.clicked.connect(self.save_fig)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton_3.setText(_translate("Form", "爬取微博内容"))
        self.pushButton_4.setText(_translate("Form", "舆情分析系统"))
        self.pushButton.setText(_translate("Form", "打开文件夹"))
        self.pushButton_2.setText(_translate("Form", "保存可视化图片"))
        self.pushButton_5.setText(_translate("Form", "话题聚类"))
        self.pushButton_6.setText(_translate("Form", "展示舆情分析"))
        self.pushButton_7.setText(_translate("Form", "对比可视化"))
        self.pushButton_8.setText(_translate("Form", "关闭"))
        self.radioButton.setText(_translate("Form", "HTML形式"))
        self.radioButton_2.setText(_translate("Form", "图片形式"))

    def openImage(self):  # 选择本地图片上传
        global filepath  # 这里为了方便别的地方引用图片路径，我们把它设置为全局变量
        global cluter
        filepath, imgType = QFileDialog.getOpenFileName(self, "打开数据文件", "",
                                                        "*.csv;;All Files(*)")  # 弹出一个文件选择框，第一个返回值imgName记录选中的文件路径+文件名，第二个返回值imgType记录文件的类型
        self.lineEdit.setText(filepath)  # 显示所选图片的本地路径
        cluter = False

    def cluster(self):
        global filepath
        if filepath is None or filepath == '':
            QMessageBox.information(self, "Error!", "请先选择数据文件！", QMessageBox.Ok)
            return
        self.pushButton_5.setEnabled(False)
        self.thread_1 = cluster_Thread(filepath)
        self.thread_1.cluster.connect(self.additem)
        self.thread_1.start()

    def additem(self, list1):
        global cluter
        global image
        # print("ui",list1)
        self.comboBox.addItems(list1)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setStyleSheet("background-color: rgba(255, 255, 255, 10);")
        self.label_4.setPixmap(QPixmap(""))  # 移除label上的图片
        image = False
        cluter = True
        df = pd.read_csv('data/output.csv', header=None)
        # 假设第二列的列名是'column_name'，使用value_counts()进行计数
        counts = df.iloc[:, 1].value_counts()
        # 绘制柱状图
        counts.plot(kind='bar')
        # plt.xticks(range(len(counts)), list1)
        plt.xticks(rotation=90)
        # 设置标题和轴标签（可选）
        plt.title('Count of Values')
        plt.xlabel('Labels')
        plt.ylabel('Count')
        # 显示图形
        plt.savefig('draw.jpg', bbox_inches='tight')
        jpg = QtGui.QPixmap('draw.jpg').scaled(self.label_4.width(),
                                               self.label_4.height())  # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
        image = True
        self.label_4.setPixmap(jpg)  # 在label控件上显示选择的图片
        self.pushButton_5.setEnabled(True)

    def analyze(self):
        global cluter
        global image
        if cluter is False:
            QMessageBox.information(self, "Error!", "请先进行聚类分析！", QMessageBox.Ok)
            return
        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(0)
        self.label_4.setPixmap(QPixmap(""))
        image = False
        self.thread_2 = analyze_Thread(r'data/output.csv', self.comboBox.currentIndex())
        self.thread_2.ana_data.connect(self.add_TableItem)
        self.thread_2.start()

    def add_TableItem(self, list1):
        data, label = list1
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(len(data))
        self.tableWidget.setColumnWidth(0, 860)
        self.tableWidget.setVerticalScrollMode(QTableWidget.ScrollPerPixel)
        self.tableWidget.setHorizontalScrollMode(QTableWidget.ScrollPerPixel)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setStyleSheet("alternate-background-color: #f0f0f0;")
        self.tableWidget.setHorizontalHeaderLabels(['内容', '情感'])
        for i in range(len(data)):
            self.tableWidget.setItem(i, 0, QTableWidgetItem(data[i]))
            self.tableWidget.setItem(i, 1, QTableWidgetItem(label[i]))

    def save_fig(self):
        global image
        if image is False:
            QMessageBox.information(self, "Error!", "没有图片可保存！", QMessageBox.Ok)
            return
        filename, _ = QFileDialog.getSaveFileName(self, "Save file", "", "*.jpg;*.png;;All Files(*)")
        plt.savefig(filename, dpi=500)

class second_UI(QWidget, Second_Form):
    def __init__(self):
        super(second_UI, self).__init__()
        self.setupUi(self)
